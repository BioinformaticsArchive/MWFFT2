function [x_aligned,matrix,shifts_refine] = mwfft2(x,r,w)
%Robust alignment of chromatograms by statistically analyzing shifts matrix generated by moving window fast Fourier transform cross-correlation
%Input 
%         x:   row vector of chromagotram to be aligned         (1*n)
%         r:   row vector of reference chromagotram             (1*n)
%         w:   window size
%  Output:
%         x_aligned:        aligned chromatogram
%         matix:            shifts matrix
%         shifts_refine:    refined shifts profile   
%  Examples:
%
%         load demo
%         w=70
%         [xa,matrix,sr] = mwfft2(x,r,w);
%         plot(x,'r');hold on;plot(r,'b');plot(xa,'g')
%         legend('to align','reference','aligned');
% Authors: Mingjing Zhang, Zhimin Zhang

%mwfft2------------------------------------------------------------
p1=x;
p2=r;
shifts=zeros(1,length(p1));
p1e=[rand(1,w) p1 rand(1,w)];
p2e=[rand(1,w) p2 rand(1,w)];

shifts(1)=FFTcorr(p1e(1:w), p2e(1:w),w);
matrix=[zeros(w-1,1);shifts(1)];
for i=2:(length(p1e)-w)
    inds=i:(i+w-1);
    shifts(i) = FFTcorr(p1e(inds), p2e(inds),w);
    z=[matrix(2:w,end);shifts(i)];
    matrix=[matrix,z];
end
shifts=shifts(w+1:end);
matrix=matrix(:,(w+1):size(matrix,2));
shift_mode=mode(matrix);


shifts_refine=shift_mode;
dlr=diff(shifts_refine);
inds=find(dlr>0 | dlr<0);
if size(inds,2)>0
    for i=2:(length(inds))
        s=shifts_refine(inds(i)+1)-shifts_refine(inds(i));
        if i~=length(inds)&&((2*abs(s)+1)>=(inds(i)-inds(i-1)) || (2*abs(s)+1)>=(inds(i+1)-inds(i)))
            shifts_refine(inds(i):inds(i+1))= shifts_refine(inds(i));
        elseif i==length(inds)&&(2*abs(s)+1)>=(inds(i)-inds(i-1))
            shifts_refine(inds(i):end)= shifts_refine(inds(i));
        end
    end
end

dlr=diff(shifts_refine);
inds=find(dlr>0 | dlr<0);
if size(inds,2)>0
    s=shifts_refine(inds(1)+1)-shifts_refine(inds(1));
    p1_aligned=p1(1:(inds(1)-abs(s)-1));
    if shifts_refine(1)>0
        p1_aligned=[zeros(1,shifts_refine(1)) p1_aligned];
    elseif shifts_refine(1)<0
        p1_aligned=p1_aligned(abs(shifts_refine(1))+1:end);
    end
    for i=1:length(inds)
        s=shifts_refine(inds(i)+1)-shifts_refine(inds(i));
        if (inds(i)-abs(s))<=0
            ss=1:(inds(i)+abs(s));
        elseif (inds(i)+abs(s))>length(shifts_refine)
            ss=((inds(i)-abs(s)):length(shifts_refine));
        else
        ss=((inds(i)-abs(s)):(inds(i)+abs(s)));
        end
        sv=p1(ss);
        [v,si]=sort(sv);
        if s<0
            sv(si(1:abs(s)))=[];
        else
            sv=[sv(1:si(1)) v(1)*ones(1,abs(s)) sv(si(1)+1:end)];
        end
        p1_aligned=[p1_aligned sv];
        if i<length(inds)
            sn=shifts_refine(inds(i+1)+1)-shifts_refine(inds(i+1));
            sns=(inds(i)+abs(s)+1):(inds(i+1)-abs(sn)-1);
            snv=p1(sns);
        else
            sn=0-shifts_refine(inds(i)+1);
            sns=(inds(i)+abs(s)+1):(length(p1));
            snv=p1(sns);
            if length(p1_aligned)>length(x)
                p1_aligned=p1_aligned(1:length(x)); 
            elseif sn>0
                snv=[snv snv(end)*ones(1,sn)];
            elseif sn<0
                 snv(end-abs(sn)+1:end)=[];
            end  
        end
        p1_aligned=[p1_aligned snv];
    end
else   
    p1_aligned=p1;
end
x_aligned=p1_aligned(1:length(x));


% FFT cross-correlation----------------------------------------------------
function lag = FFTcorr(spectrum, target, shift)
%padding
M=size(target,2);
diff = 1000000;
for i=1:20
    curdiff=((2^i)-M);
    if (curdiff > 0 && curdiff<diff)
        diff = curdiff;
    end
end

target(1,M+diff)=0;
spectrum(1,M+diff)=0;
M= M+diff;
X=fft(target);
Y=fft(spectrum);
R=X.*conj(Y);
R=R./(M);
rev=ifft(R);
vals=real(rev);
maxpos = 1;
maxi = -1;
if M<shift
    shift = M;
end

for i = 1:shift
    if (vals(1,i) > maxi)
        maxi = vals(1,i);
        maxpos = i;
    end
    if (vals(1,length(vals)-i+1) > maxi)
        maxi = vals(1,length(vals)-i+1);
        maxpos = length(vals)-i+1;
    end
end

if maxi < 0.1
    lag =0;
    return;
end
if maxpos > length(vals)/2
   lag = maxpos-length(vals)-1;
else
   lag =maxpos-1;
end
%--------------------------------------------------------------------------